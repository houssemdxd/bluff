<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bluff Master - Card Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        /* Animated background elements */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="cards" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse"><rect width="3" height="4" fill="%23ffffff" opacity="0.1" rx="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23cards)"/></svg>');
            animation: float 20s ease-in-out infinite;
            z-index: -2;
        }

        .container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            position: relative;
            z-index: 1;
        }

        .game-title {
            font-size: 4rem;
            font-weight: 900;
            background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6bcf7f, #4ecdc4, #45b7d1);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: gradient-shift 3s ease-in-out infinite;
            text-align: center;
            margin-bottom: 1rem;
            text-shadow: 0 0 30px rgba(255, 255, 255, 0.3);
            letter-spacing: -2px;
        }

        .game-subtitle {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.8);
            text-align: center;
            margin-bottom: 3rem;
            font-weight: 300;
            letter-spacing: 1px;
        }

        .card-deck {
            position: absolute;
            top: 10%;
            right: 10%;
            display: flex;
            transform: rotate(15deg);
            z-index: -1;
        }

        .card {
            width: 60px;
            height: 90px;
            background: linear-gradient(135deg, #ffffff, #f0f0f0);
            border-radius: 8px;
            margin-left: -30px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            border: 2px solid #ddd;
            animation: card-float 4s ease-in-out infinite;
        }

        .card:nth-child(1) { animation-delay: 0s; z-index: 3; }
        .card:nth-child(2) { animation-delay: 0.5s; z-index: 2; }
        .card:nth-child(3) { animation-delay: 1s; z-index: 1; }

        .buttons-container {
            display: flex;
            flex-direction: column;
            gap: 2rem;
            align-items: center;
            width: 100%;
            max-width: 400px;
        }

        .game-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            padding: 1.5rem 3rem;
            border-radius: 15px;
            color: white;
            font-size: 1.3rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            text-decoration: none;
            display: inline-block;
            width: 100%;
            text-align: center;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
            border: 2px solid transparent;
        }

        .game-button:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .game-button:active {
            transform: translateY(-2px) scale(1.02);
        }

        .game-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .game-button:hover::before {
            left: 100%;
        }

        .join-button {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            box-shadow: 0 10px 30px rgba(240, 147, 251, 0.4);
        }

        .join-button:hover {
            box-shadow: 0 20px 40px rgba(240, 147, 251, 0.6);
        }

        .game-button a {
            color: inherit;
            text-decoration: none;
            display: block;
            width: 100%;
            height: 100%;
        }

        /* Floating cards animation */
        @keyframes card-float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-10px) rotate(5deg); }
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        @keyframes gradient-shift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        /* Poker chips decoration */
        .chip {
            position: absolute;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            border: 3px solid #fff;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .chip:nth-child(1) {
            top: 20%;
            left: 15%;
            animation: chip-spin 8s linear infinite;
        }

        .chip:nth-child(2) {
            bottom: 30%;
            right: 20%;
            background: linear-gradient(45deg, #4ecdc4, #44a08d);
            animation: chip-spin 10s linear infinite reverse;
        }

        @keyframes chip-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Modal styles for room code input */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            margin: 15% auto;
            padding: 2rem;
            border-radius: 20px;
            width: 90%;
            max-width: 400px;
            text-align: center;
            border: 2px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        }

        .modal h2 {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .modal input {
            width: 100%;
            padding: 1rem;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1.1rem;
            margin-bottom: 1rem;
            text-align: center;
            letter-spacing: 2px;
        }

        .modal input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.5);
        }

        .modal-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .modal-button {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .modal-confirm {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .modal-cancel {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .modal-button:hover {
            transform: translateY(-2px);
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .game-title {
                font-size: 2.5rem;
            }
            
            .card-deck {
                display: none;
            }
            
            .chip {
                display: none;
            }
            
            .container {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Decorative elements -->
    <div class="chip"></div>
    <div class="chip"></div>
    
    <div class="card-deck">
        <div class="card"></div>
        <div class="card"></div>
        <div class="card"></div>
    </div>

    <div class="container">
        <h1 class="game-title">BLUFF MASTER</h1>
        <p class="game-subtitle">The Ultimate Lie Detection Card Game</p>
        
        <div class="buttons-container">
            <button class="game-button">
                <a href="{{ path('app_romm_spesification')}}">üéØ Start New Game</a>
            </button>
            
            <button class="game-button join-button" id="join-button">
                üÉè Join Existing Room
            </button>
        </div>
    </div>

    <!-- Modal for room code input -->
    <div id="roomModal" class="modal">
        <div class="modal-content">
            <h2>Enter Room Code</h2>
            <input type="text" id="roomCodeInput" placeholder="XXXX-XXXX" maxlength="9">
            <div class="modal-buttons">
                <button class="modal-button modal-confirm" id="confirmJoin">Join Game</button>
                <button class="modal-button modal-cancel" id="cancelJoin">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Store player data in memory instead of localStorage
        const gameStorage = {};

        function storePlayerInRoom(roomId, playerId) {
            gameStorage[roomId] = playerId;
        }

        function getPlayerFromRoom(roomId) {
            return gameStorage[roomId] || null;
        }

        // Modal functionality
        const modal = document.getElementById('roomModal');
        const joinButton = document.getElementById('join-button');
        const confirmButton = document.getElementById('confirmJoin');
        const cancelButton = document.getElementById('cancelJoin');
        const roomCodeInput = document.getElementById('roomCodeInput');

        joinButton.addEventListener('click', function() {
            modal.style.display = 'block';
            roomCodeInput.focus();
        });

        cancelButton.addEventListener('click', function() {
            modal.style.display = 'none';
            roomCodeInput.value = '';
        });

        confirmButton.addEventListener('click', function() {
            const roomCode = roomCodeInput.value.trim();
            if (roomCode) {
                modal.style.display = 'none';
                join(roomCode);
                roomCodeInput.value = '';
            }
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
                roomCodeInput.value = '';
            }
        });

        // Enter key support for room code input
        roomCodeInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                confirmButton.click();
            }
        });

        function join(roomId) { 
            if (!roomId) {
                console.error('Room ID is required');
                return;
            }

            var playerId = getPlayerFromRoom(roomId);
            var url = `/join?roomId=${roomId}&playerId=${playerId}`;

            fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.playerId == "999x") {
                    var url = `/realgame/${roomId}/${playerId}`;
                    window.location.href = url;
                    return;
                }
                
                if (data.roomId == "1x1x") {
                    console.log("There is no room with that code");
                    alert("Room not found. Please check your room code.");
                    return;
                }

                var url = `/game/${roomId}/${data.playerId}`;
                
                fetch(url, {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                if (data.playerId && data.roomId) {
                    storePlayerInRoom(data.roomId, data.playerId);
                    console.log('Player ID:', data.playerId);
                    console.log('Room ID:', data.roomId);
                    var url = `/realgame/${data.roomId}/${data.playerId}`;
                    window.location.href = url; 

                } else {
                    console.error('Failed to join the room.');
                    alert('Failed to join the room. Please try again.');
                }
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('An error occurred while joining the room.');
            });
        }

        function createRoom() {
            fetch('/createRoom', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.id && data.player_token) {
                    storePlayerInRoom(data.id, data.player_token);
                    console.log('Room ID and Player Token stored successfully with the new created room.');
                    
                    var url = `/game/${data.id}/${data.player_token}`;
                    window.location.href = url;
                } else {
                    console.error('Response does not contain the expected fields.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        // Add some interactive effects
        document.addEventListener('DOMContentLoaded', function() {
            // Add click effect to buttons
            const buttons = document.querySelectorAll('.game-button');
            buttons.forEach(button => {
                button.addEventListener('click', function(e) {
                    const ripple = document.createElement('span');
                    const rect = button.getBoundingClientRect();
                    const size = Math.max(rect.width, rect.height);
                    const x = e.clientX - rect.left - size / 2;
                    const y = e.clientY - rect.top - size / 2;
                    
                    ripple.style.cssText = `
                        position: absolute;
                        width: ${size}px;
                        height: ${size}px;
                        left: ${x}px;
                        top: ${y}px;
                        background: rgba(255, 255, 255, 0.3);
                        border-radius: 50%;
                        transform: scale(0);
                        animation: ripple 0.6s ease-out;
                        pointer-events: none;
                    `;
                    
                    button.appendChild(ripple);
                    
                    setTimeout(() => {
                        ripple.remove();
                    }, 600);
                });
            });
        });

        // Add ripple animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(2);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>